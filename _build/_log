### Starting build.
# Target: ai.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules ai.mli > ai.mli.depends
# Target: controller.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:controller.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules controller.mli > controller.mli.depends
# Target: model.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:model.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules model.mli > model.mli.depends
# Target: controller.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:controller.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o controller.cmi controller.mli
# Target: types.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:types.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules types.mli > types.mli.depends
# Target: pokemon.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:pokemon.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules pokemon.mli > pokemon.mli.depends
# Target: pokemon.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:pokemon.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o pokemon.cmi pokemon.mli
# Target: types.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:types.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o types.cmi types.mli
# Target: model.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:model.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o model.cmi model.mli
# Target: ai.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o ai.cmi ai.mli
# Target: ai.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules ai.ml > ai.ml.depends
# Target: ai.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o ai.cmo ai.ml
# Target: controller.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:controller.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules controller.ml > controller.ml.depends
# Target: controller.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:controller.cmo, file:controller.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o controller.cmo controller.ml
# Target: GUI.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:GUI.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules GUI.mli > GUI.mli.depends
# Target: GUI.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:GUI.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o GUI.cmi GUI.mli
# Target: GUI.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:GUI.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules GUI.ml > GUI.ml.depends
# Target: GUI.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:GUI.cmo, file:GUI.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o GUI.cmo GUI.ml
# Target: model.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:model.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules model.ml > model.ml.depends
# Target: model.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:model.cmo, file:model.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o model.cmo model.ml
# Target: types.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:types.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules types.ml > types.ml.depends
# Target: types.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o types.cmo types.ml
# Target: pokemon.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:pokemon.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules pokemon.ml > pokemon.ml.depends
# Target: pokemon.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:pokemon.cmo, file:pokemon.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o pokemon.cmo pokemon.ml
# Compilation successful.
