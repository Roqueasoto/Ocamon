### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test.ml > test.ml.depends # cached
# Target: test_andrea.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:test_andrea.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_andrea.mli > test_andrea.mli.depends # cached
# Target: test_andrea.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:test_andrea.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_andrea.cmi test_andrea.mli # cached
# Target: test_cynthia.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:test_cynthia.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_cynthia.mli > test_cynthia.mli.depends # cached
# Target: test_cynthia.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:test_cynthia.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_cynthia.cmi test_cynthia.mli # cached
# Target: test_roque.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:test_roque.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_roque.mli > test_roque.mli.depends # cached
# Target: test_roque.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:test_roque.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_roque.cmi test_roque.mli # cached
# Target: test_timothy.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:test_timothy.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_timothy.mli > test_timothy.mli.depends # cached
# Target: test_timothy.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:test_timothy.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_timothy.cmi test_timothy.mli # cached
# Target: test.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test.cmo test.ml # cached
# Target: test_andrea.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:test_andrea.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_andrea.ml > test_andrea.ml.depends
# Target: controller.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:controller.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules controller.mli > controller.mli.depends # cached
# Target: controller.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:controller.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o controller.cmi controller.mli # cached
# Target: pokemon.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:pokemon.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules pokemon.mli > pokemon.mli.depends # cached
# Target: pokemon.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:pokemon.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o pokemon.cmi pokemon.mli # cached
# Target: test_cynthia.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:test_cynthia.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_cynthia.ml > test_cynthia.ml.depends # cached
# Target: test_cynthia.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:test_cynthia.cmo, file:test_cynthia.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_cynthia.cmo test_cynthia.ml # cached
# Target: test_roque.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:test_roque.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_roque.ml > test_roque.ml.depends # cached
# Target: test_roque.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:test_roque.cmo, file:test_roque.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_roque.cmo test_roque.ml # cached
# Target: test_timothy.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:test_timothy.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules test_timothy.ml > test_timothy.ml.depends # cached
# Target: test_timothy.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:test_timothy.cmo, file:test_timothy.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_timothy.cmo test_timothy.ml # cached
# Target: test_andrea.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:test_andrea.cmo, file:test_andrea.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o test_andrea.cmo test_andrea.ml
# Target: controller.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:controller.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules controller.ml > controller.ml.depends # cached
# Target: controller.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:controller.cmo, file:controller.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o controller.cmo controller.ml # cached
# Target: pokemon.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:pokemon.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package ANSITerminal -modules pokemon.ml > pokemon.ml.depends # cached
# Target: pokemon.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:pokemon.cmo, file:pokemon.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package ANSITerminal -o pokemon.cmo pokemon.ml # cached
# Target: test.byte, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package oUnit -package yojson -package ANSITerminal controller.cmo pokemon.cmo test_andrea.cmo test_cynthia.cmo test_roque.cmo test_timothy.cmo test.cmo -o test.byte
# Compilation successful.
