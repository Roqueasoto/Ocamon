### Starting build.
# Target: ai.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules ai.mli > ai.mli.depends
# Target: controller.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:controller.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules controller.mli > controller.mli.depends
# Target: model.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:model.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules model.mli > model.mli.depends
# Target: controller.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:controller.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o controller.cmi controller.mli
# Target: types.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:types.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules types.mli > types.mli.depends
# Target: pokemon.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:pokemon.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules pokemon.mli > pokemon.mli.depends
# Target: pokemon.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:pokemon.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o pokemon.cmi pokemon.mli
# Target: types.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:types.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o types.cmi types.mli
# Target: model.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:model.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o model.cmi model.mli
# Target: ai.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o ai.cmi ai.mli
# Target: ai.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules ai.ml > ai.ml.depends
# Target: ai.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o ai.cmo ai.ml
# Target: controller.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:controller.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules controller.ml > controller.ml.depends
# Target: controller.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:controller.cmo, file:controller.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o controller.cmo controller.ml
# Target: GUI.mli.depends, tags: { package(oUnit), package(yojson), extension:mli, file:GUI.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules GUI.mli > GUI.mli.depends
# Target: GUI.cmi, tags: { package(oUnit), package(yojson), byte, compile, extension:mli, file:GUI.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o GUI.cmi GUI.mli
# Target: GUI.ml.depends, tags: { package(oUnit), package(yojson), extension:ml, file:GUI.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -modules GUI.ml > GUI.ml.depends
# Target: GUI.cmo, tags: { package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:GUI.cmo, file:GUI.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -o GUI.cmo GUI.ml
+ ocamlfind ocamlc -c -package oUnit -package yojson -o GUI.cmo GUI.ml
File "GUI.ml", line 1:
Error: The implementation GUI.ml does not match the interface GUI.cmi:
       The module `Inventory' is required but not provided
       File "GUI.mli", line 131, characters 0-25: Expected declaration
       The module `Start' is required but not provided
       File "GUI.mli", line 126, characters 0-23: Expected declaration
       The module `Overworld' is required but not provided
       File "GUI.mli", line 121, characters 0-31: Expected declaration
       The module `Combat' is required but not provided
       File "GUI.mli", line 116, characters 0-25: Expected declaration
       The module type `InvGUI' is required but not provided
       File "GUI.mli", line 95, characters 0-302: Expected declaration
       The module type `CombatGUI' is required but not provided
       File "GUI.mli", line 61, characters 0-988: Expected declaration
       The module type `OverworldGUI' is required but not provided
       File "GUI.mli", line 39, characters 0-824: Expected declaration
       The module type `StartGUI' is required but not provided
       File "GUI.mli", line 13, characters 0-924: Expected declaration
       The type `animation' is required but not provided
       File "GUI.mli", line 11, characters 0-14: Expected declaration
       The type `image' is required but not provided
       File "GUI.mli", line 8, characters 0-10: Expected declaration
Command exited with code 2.
# Compilation unsuccessful.
